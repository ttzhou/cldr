//go:build generate

package gen

import (
	"fmt"
	"go/format"
	"maps"
	"os"
	"path/filepath"
	"slices"
	"strings"

	"github.com/ttzhou/cldr/internal/locale"
)

var (
	localeFileTemplate = strings.Trim(`
package locale

// Code generated by running "go generate" in this directory; DO NOT EDIT.

var %s = %#v
`, "\n ")

	localeVarFileTemplate = strings.Trim(`
package locale

// Code generated by running "go generate" in this directory; DO NOT EDIT.

import "strings"

func Get(l string) (Locale, bool) {
	locale, ok := localeDataMap[strings.ReplaceAll(l, "_", "-")]
	return locale, ok
}

// These are locales with coverage = '%s' in CLDR data
var localeDataMap = map[string]Locale{
%s
}
`, "\n ")
)

type currencyData locale.CurrencyData

func (cd currencyData) GoString() string {
	return fmt.Sprintf("{%v, %q, %q, %q}",
		cd.MinorDigits,
		cd.DisplayCode,
		cd.DisplaySymbol,
		cd.DisplaySymbolNarrow,
	)
}

type numberFormat locale.NumberFormat

func (nf numberFormat) GoString() string {
	return fmt.Sprintf("NumberFormat{%v,%v,%q,%q,%q,%q}",
		nf.PrimaryGroupSize,
		nf.SecondaryGroupSize,
		nf.Prefix,
		nf.Suffix,
		nf.NegPrefix,
		nf.NegSuffix,
	)
}

type numberFormats locale.NumberFormats

func (nfs numberFormats) GoString() string {
	return fmt.Sprintf("NumberFormats{%#v,%#v,%#v,%#v,%#v,%#v,%#v}",
		numberFormat(nfs.StandardDecimal),
		numberFormat(nfs.StandardCurrencySymbol),
		numberFormat(nfs.StandardCurrencyAlpha),
		numberFormat(nfs.StandardCurrencyNoSymbol),
		numberFormat(nfs.AccountingCurrencySymbol),
		numberFormat(nfs.AccountingCurrencyAlpha),
		numberFormat(nfs.AccountingCurrencyNoSymbol),
	)
}

type currenciesMap map[string]locale.CurrencyData

func (cm currenciesMap) GoString() string {
	cmsb := strings.Builder{}
	cmsb.WriteString("map[string]CurrencyData{\n")

	for _, cur := range slices.Sorted(maps.Keys(cm)) {
		info := currencyData(cm[cur])
		cmsb.WriteString(fmt.Sprintf("\"%s\": ", cur))
		cmsb.WriteString(info.GoString())
		cmsb.WriteString(",\n")
	}

	cmsb.WriteString("}")

	return cmsb.String()
}

type numberInfo locale.NumberInfo

func (ni numberInfo) GoString() string {
	return fmt.Sprintf(
		strings.Join([]string{
			"NumberInfo{%q,",
			"%#v,",
			"%q,%q,",
			"%#v,",
			"}",
		}, "\n"),
		ni.NumberSystem,
		ni.Digits,
		ni.FractionalSeparator,
		ni.GroupingSeparator,
		numberFormats(ni.Formats),
	)
}

type localeDataGen locale.LocaleData

func (ldg localeDataGen) GoString() string {
	return fmt.Sprintf(
		strings.Join([]string{
			"LocaleData{",
			"%#v,",
			"%#v,",
			"}",
		}, "\n"),
		numberInfo(ldg.NumberInfo),
		currenciesMap(ldg.SupportedCurrencies),
	)
}

func localeToVarName(l string) string {
	return fmt.Sprintf("%s", strings.ReplaceAll(l, "-", ""))
}

func (c cldrData) writeLocaleDataFile(localeDir string, ld locale.LocaleData, ldn string) error {
	location := filepath.Join(localeDir, fmt.Sprintf("%s.go", ldn))
	contentBytes := fmt.Appendf([]byte{},
		localeFileTemplate,
		localeToVarName(ldn),
		localeDataGen(ld),
	)

	contents, err := format.Source(contentBytes)
	if err != nil {
		_ = os.WriteFile(location, contents, 0o600)

		return err
	}

	err = os.WriteFile(location, contents, 0o600)
	if err != nil {
		return err
	}

	return nil
}

func (c cldrData) writeLocaleFiles(localeDir, coverageLevel string) (int, int, error) {
	known, total := 0, 0
	mappings := c["locale-mappings"].(cldrLocaleMappings)
	localeMappings := strings.Builder{}

	for _, localeCode := range slices.Sorted(maps.Keys(mappings)) {
		localeMapping := mappings[localeCode]
		total++

		if coverageLevel != "" && localeMapping["coverage"] != coverageLevel {
			continue
		}

		locale, _ := c.GenerateLocale(localeCode)
		// No need to write the locale data file if it's "covered" by another mapping
		if localeCode == localeMapping["known-locale"] {
			localedata, _ := c.GenerateLocaleData(localeCode)
			_ = c.writeLocaleDataFile(localeDir, localedata, localeCode)

			known++
		}

		localeMappings.WriteString(fmt.Sprintf("%q: {%q,%q,%q,%q,%s},\n",
			localeCode,
			locale.Code,
			locale.Language,
			locale.Territory,
			locale.Variant,
			localeToVarName(localeMapping["known-locale"]),
		))
	}

	location := filepath.Join(localeDir, "01_locales.go")
	contentBytes := fmt.Appendf([]byte{},
		localeVarFileTemplate,
		coverageLevel,
		localeMappings.String(),
	)

	contents, err := format.Source(contentBytes)
	if err != nil {
		_ = os.WriteFile(location, contents, 0o600)

		return known, total, err
	}

	err = os.WriteFile(location, contents, 0o600)
	if err != nil {
		return known, total, err
	}

	return known, total, nil
}
